// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  consumable: (where?: ConsumableWhereInput) => Promise<boolean>;
  equipment: (where?: EquipmentWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderConsumable: (where?: OrderConsumableWhereInput) => Promise<boolean>;
  orderEquipment: (where?: OrderEquipmentWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  consumable: (where: ConsumableWhereUniqueInput) => ConsumableNullablePromise;
  consumables: (args?: {
    where?: ConsumableWhereInput;
    orderBy?: ConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Consumable>;
  consumablesConnection: (args?: {
    where?: ConsumableWhereInput;
    orderBy?: ConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConsumableConnectionPromise;
  equipment: (where: EquipmentWhereUniqueInput) => EquipmentNullablePromise;
  equipments: (args?: {
    where?: EquipmentWhereInput;
    orderBy?: EquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Equipment>;
  equipmentsConnection: (args?: {
    where?: EquipmentWhereInput;
    orderBy?: EquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EquipmentConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderConsumable: (
    where: OrderConsumableWhereUniqueInput
  ) => OrderConsumableNullablePromise;
  orderConsumables: (args?: {
    where?: OrderConsumableWhereInput;
    orderBy?: OrderConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderConsumable>;
  orderConsumablesConnection: (args?: {
    where?: OrderConsumableWhereInput;
    orderBy?: OrderConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConsumableConnectionPromise;
  orderEquipment: (
    where: OrderEquipmentWhereUniqueInput
  ) => OrderEquipmentNullablePromise;
  orderEquipments: (args?: {
    where?: OrderEquipmentWhereInput;
    orderBy?: OrderEquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderEquipment>;
  orderEquipmentsConnection: (args?: {
    where?: OrderEquipmentWhereInput;
    orderBy?: OrderEquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderEquipmentConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConsumable: (data: ConsumableCreateInput) => ConsumablePromise;
  updateConsumable: (args: {
    data: ConsumableUpdateInput;
    where: ConsumableWhereUniqueInput;
  }) => ConsumablePromise;
  updateManyConsumables: (args: {
    data: ConsumableUpdateManyMutationInput;
    where?: ConsumableWhereInput;
  }) => BatchPayloadPromise;
  upsertConsumable: (args: {
    where: ConsumableWhereUniqueInput;
    create: ConsumableCreateInput;
    update: ConsumableUpdateInput;
  }) => ConsumablePromise;
  deleteConsumable: (where: ConsumableWhereUniqueInput) => ConsumablePromise;
  deleteManyConsumables: (where?: ConsumableWhereInput) => BatchPayloadPromise;
  createEquipment: (data: EquipmentCreateInput) => EquipmentPromise;
  updateEquipment: (args: {
    data: EquipmentUpdateInput;
    where: EquipmentWhereUniqueInput;
  }) => EquipmentPromise;
  updateManyEquipments: (args: {
    data: EquipmentUpdateManyMutationInput;
    where?: EquipmentWhereInput;
  }) => BatchPayloadPromise;
  upsertEquipment: (args: {
    where: EquipmentWhereUniqueInput;
    create: EquipmentCreateInput;
    update: EquipmentUpdateInput;
  }) => EquipmentPromise;
  deleteEquipment: (where: EquipmentWhereUniqueInput) => EquipmentPromise;
  deleteManyEquipments: (where?: EquipmentWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderConsumable: (
    data: OrderConsumableCreateInput
  ) => OrderConsumablePromise;
  updateOrderConsumable: (args: {
    data: OrderConsumableUpdateInput;
    where: OrderConsumableWhereUniqueInput;
  }) => OrderConsumablePromise;
  updateManyOrderConsumables: (args: {
    data: OrderConsumableUpdateManyMutationInput;
    where?: OrderConsumableWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderConsumable: (args: {
    where: OrderConsumableWhereUniqueInput;
    create: OrderConsumableCreateInput;
    update: OrderConsumableUpdateInput;
  }) => OrderConsumablePromise;
  deleteOrderConsumable: (
    where: OrderConsumableWhereUniqueInput
  ) => OrderConsumablePromise;
  deleteManyOrderConsumables: (
    where?: OrderConsumableWhereInput
  ) => BatchPayloadPromise;
  createOrderEquipment: (
    data: OrderEquipmentCreateInput
  ) => OrderEquipmentPromise;
  updateOrderEquipment: (args: {
    data: OrderEquipmentUpdateInput;
    where: OrderEquipmentWhereUniqueInput;
  }) => OrderEquipmentPromise;
  updateManyOrderEquipments: (args: {
    data: OrderEquipmentUpdateManyMutationInput;
    where?: OrderEquipmentWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderEquipment: (args: {
    where: OrderEquipmentWhereUniqueInput;
    create: OrderEquipmentCreateInput;
    update: OrderEquipmentUpdateInput;
  }) => OrderEquipmentPromise;
  deleteOrderEquipment: (
    where: OrderEquipmentWhereUniqueInput
  ) => OrderEquipmentPromise;
  deleteManyOrderEquipments: (
    where?: OrderEquipmentWhereInput
  ) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  consumable: (
    where?: ConsumableSubscriptionWhereInput
  ) => ConsumableSubscriptionPayloadSubscription;
  equipment: (
    where?: EquipmentSubscriptionWhereInput
  ) => EquipmentSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderConsumable: (
    where?: OrderConsumableSubscriptionWhereInput
  ) => OrderConsumableSubscriptionPayloadSubscription;
  orderEquipment: (
    where?: OrderEquipmentSubscriptionWhereInput
  ) => OrderEquipmentSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OrderEquipmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "takenAt_ASC"
  | "takenAt_DESC"
  | "returnedAt_ASC"
  | "returnedAt_DESC";

export type EquipmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serial_ASC"
  | "serial_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "available_ASC"
  | "available_DESC"
  | "stock_ASC"
  | "stock_DESC"
  | "usable_ASC"
  | "usable_DESC";

export type OrderStatus = "CREATED" | "CLOSED" | "ON_HOLD";

export type ProjectStatus =
  | "ON_HOLD"
  | "APPROVED"
  | "NOT_APPROVED"
  | "CANCELED";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type ConsumableOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serial_ASC"
  | "serial_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "available_ASC"
  | "available_DESC"
  | "stock_ASC"
  | "stock_DESC"
  | "minimalStock_ASC"
  | "minimalStock_DESC"
  | "price_ASC"
  | "price_DESC"
  | "consumableType_ASC"
  | "consumableType_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type OrderConsumableOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "observations_ASC"
  | "observations_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "closedAt_ASC"
  | "closedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "projectName_ASC"
  | "projectName_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "approvalDate_ASC"
  | "approvalDate_DESC"
  | "expirationDate_ASC"
  | "expirationDate_DESC";

export interface OrderConsumableCreateManyInput {
  create?: Maybe<OrderConsumableCreateInput[] | OrderConsumableCreateInput>;
  connect?: Maybe<
    OrderConsumableWhereUniqueInput[] | OrderConsumableWhereUniqueInput
  >;
}

export type ConsumableWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type EquipmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface UserUpdateDataInput {
  name?: Maybe<String>;
}

export interface EquipmentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  serial?: Maybe<String>;
  serial_not?: Maybe<String>;
  serial_in?: Maybe<String[] | String>;
  serial_not_in?: Maybe<String[] | String>;
  serial_lt?: Maybe<String>;
  serial_lte?: Maybe<String>;
  serial_gt?: Maybe<String>;
  serial_gte?: Maybe<String>;
  serial_contains?: Maybe<String>;
  serial_not_contains?: Maybe<String>;
  serial_starts_with?: Maybe<String>;
  serial_not_starts_with?: Maybe<String>;
  serial_ends_with?: Maybe<String>;
  serial_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  usable?: Maybe<Boolean>;
  usable_not?: Maybe<Boolean>;
  AND?: Maybe<EquipmentWhereInput[] | EquipmentWhereInput>;
  OR?: Maybe<EquipmentWhereInput[] | EquipmentWhereInput>;
  NOT?: Maybe<EquipmentWhereInput[] | EquipmentWhereInput>;
}

export interface EquipmentUpsertNestedInput {
  update: EquipmentUpdateDataInput;
  create: EquipmentCreateInput;
}

export interface ConsumableUpdateManyDataInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  minimalStock?: Maybe<Int>;
  price?: Maybe<Float>;
  consumableType?: Maybe<String>;
}

export interface EquipmentUpdateOneRequiredInput {
  create?: Maybe<EquipmentCreateInput>;
  update?: Maybe<EquipmentUpdateDataInput>;
  upsert?: Maybe<EquipmentUpsertNestedInput>;
  connect?: Maybe<EquipmentWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface EquipmentCreateInput {
  id?: Maybe<Int>;
  serial: String;
  name: String;
  description: String;
  available?: Maybe<Boolean>;
  stock: Int;
  usable?: Maybe<Boolean>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface EquipmentUpdateInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  usable?: Maybe<Boolean>;
}

export interface OrderEquipmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderEquipmentWhereInput>;
  AND?: Maybe<
    | OrderEquipmentSubscriptionWhereInput[]
    | OrderEquipmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | OrderEquipmentSubscriptionWhereInput[]
    | OrderEquipmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | OrderEquipmentSubscriptionWhereInput[]
    | OrderEquipmentSubscriptionWhereInput
  >;
}

export interface EquipmentUpdateManyMutationInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  usable?: Maybe<Boolean>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface OrderCreateInput {
  id?: Maybe<Int>;
  status: OrderStatus;
  observations?: Maybe<String>;
  closedAt?: Maybe<DateTimeInput>;
  project: ProjectCreateOneInput;
  administrator: UserCreateOneInput;
  user: UserCreateOneInput;
  takenEquipments?: Maybe<OrderEquipmentCreateManyInput>;
  takenConsumables?: Maybe<OrderConsumableCreateManyInput>;
}

export interface ConsumableSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConsumableWhereInput>;
  AND?: Maybe<
    ConsumableSubscriptionWhereInput[] | ConsumableSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConsumableSubscriptionWhereInput[] | ConsumableSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConsumableSubscriptionWhereInput[] | ConsumableSubscriptionWhereInput
  >;
}

export interface ProjectCreateOneInput {
  create?: Maybe<ProjectCreateInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProjectCreateInput {
  id?: Maybe<Int>;
  projectName: String;
  manager: UserCreateOneInput;
  chef: UserCreateOneInput;
  status?: Maybe<ProjectStatus>;
  members?: Maybe<UserCreateManyInput>;
  equipments?: Maybe<EquipmentCreateManyInput>;
  consumables?: Maybe<ConsumableCreateManyInput>;
  description?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  approvalDate?: Maybe<DateTimeInput>;
  expirationDate?: Maybe<DateTimeInput>;
}

export interface ConsumableWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  serial?: Maybe<String>;
  serial_not?: Maybe<String>;
  serial_in?: Maybe<String[] | String>;
  serial_not_in?: Maybe<String[] | String>;
  serial_lt?: Maybe<String>;
  serial_lte?: Maybe<String>;
  serial_gt?: Maybe<String>;
  serial_gte?: Maybe<String>;
  serial_contains?: Maybe<String>;
  serial_not_contains?: Maybe<String>;
  serial_starts_with?: Maybe<String>;
  serial_not_starts_with?: Maybe<String>;
  serial_ends_with?: Maybe<String>;
  serial_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  minimalStock?: Maybe<Int>;
  minimalStock_not?: Maybe<Int>;
  minimalStock_in?: Maybe<Int[] | Int>;
  minimalStock_not_in?: Maybe<Int[] | Int>;
  minimalStock_lt?: Maybe<Int>;
  minimalStock_lte?: Maybe<Int>;
  minimalStock_gt?: Maybe<Int>;
  minimalStock_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  consumableType?: Maybe<String>;
  consumableType_not?: Maybe<String>;
  consumableType_in?: Maybe<String[] | String>;
  consumableType_not_in?: Maybe<String[] | String>;
  consumableType_lt?: Maybe<String>;
  consumableType_lte?: Maybe<String>;
  consumableType_gt?: Maybe<String>;
  consumableType_gte?: Maybe<String>;
  consumableType_contains?: Maybe<String>;
  consumableType_not_contains?: Maybe<String>;
  consumableType_starts_with?: Maybe<String>;
  consumableType_not_starts_with?: Maybe<String>;
  consumableType_ends_with?: Maybe<String>;
  consumableType_not_ends_with?: Maybe<String>;
  AND?: Maybe<ConsumableWhereInput[] | ConsumableWhereInput>;
  OR?: Maybe<ConsumableWhereInput[] | ConsumableWhereInput>;
  NOT?: Maybe<ConsumableWhereInput[] | ConsumableWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface OrderConsumableWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  consumable?: Maybe<ConsumableWhereInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<OrderConsumableWhereInput[] | OrderConsumableWhereInput>;
  OR?: Maybe<OrderConsumableWhereInput[] | OrderConsumableWhereInput>;
  NOT?: Maybe<OrderConsumableWhereInput[] | OrderConsumableWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<Int>;
  name: String;
}

export interface ProjectUpdateInput {
  projectName?: Maybe<String>;
  manager?: Maybe<UserUpdateOneRequiredInput>;
  chef?: Maybe<UserUpdateOneRequiredInput>;
  status?: Maybe<ProjectStatus>;
  members?: Maybe<UserUpdateManyInput>;
  equipments?: Maybe<EquipmentUpdateManyInput>;
  consumables?: Maybe<ConsumableUpdateManyInput>;
  description?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  approvalDate?: Maybe<DateTimeInput>;
  expirationDate?: Maybe<DateTimeInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface ProjectWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  projectName?: Maybe<String>;
  projectName_not?: Maybe<String>;
  projectName_in?: Maybe<String[] | String>;
  projectName_not_in?: Maybe<String[] | String>;
  projectName_lt?: Maybe<String>;
  projectName_lte?: Maybe<String>;
  projectName_gt?: Maybe<String>;
  projectName_gte?: Maybe<String>;
  projectName_contains?: Maybe<String>;
  projectName_not_contains?: Maybe<String>;
  projectName_starts_with?: Maybe<String>;
  projectName_not_starts_with?: Maybe<String>;
  projectName_ends_with?: Maybe<String>;
  projectName_not_ends_with?: Maybe<String>;
  manager?: Maybe<UserWhereInput>;
  chef?: Maybe<UserWhereInput>;
  status?: Maybe<ProjectStatus>;
  status_not?: Maybe<ProjectStatus>;
  status_in?: Maybe<ProjectStatus[] | ProjectStatus>;
  status_not_in?: Maybe<ProjectStatus[] | ProjectStatus>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  equipments_every?: Maybe<EquipmentWhereInput>;
  equipments_some?: Maybe<EquipmentWhereInput>;
  equipments_none?: Maybe<EquipmentWhereInput>;
  consumables_every?: Maybe<ConsumableWhereInput>;
  consumables_some?: Maybe<ConsumableWhereInput>;
  consumables_none?: Maybe<ConsumableWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  approvalDate?: Maybe<DateTimeInput>;
  approvalDate_not?: Maybe<DateTimeInput>;
  approvalDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  approvalDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  approvalDate_lt?: Maybe<DateTimeInput>;
  approvalDate_lte?: Maybe<DateTimeInput>;
  approvalDate_gt?: Maybe<DateTimeInput>;
  approvalDate_gte?: Maybe<DateTimeInput>;
  expirationDate?: Maybe<DateTimeInput>;
  expirationDate_not?: Maybe<DateTimeInput>;
  expirationDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expirationDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expirationDate_lt?: Maybe<DateTimeInput>;
  expirationDate_lte?: Maybe<DateTimeInput>;
  expirationDate_gt?: Maybe<DateTimeInput>;
  expirationDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface EquipmentCreateManyInput {
  create?: Maybe<EquipmentCreateInput[] | EquipmentCreateInput>;
  connect?: Maybe<EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput>;
}

export interface OrderEquipmentUpdateInput {
  equipment?: Maybe<EquipmentUpdateOneRequiredInput>;
  amount?: Maybe<Int>;
  takenAt?: Maybe<DateTimeInput>;
  returnedAt?: Maybe<DateTimeInput>;
}

export interface ConsumableCreateManyInput {
  create?: Maybe<ConsumableCreateInput[] | ConsumableCreateInput>;
  connect?: Maybe<ConsumableWhereUniqueInput[] | ConsumableWhereUniqueInput>;
}

export interface OrderConsumableUpdateInput {
  consumable?: Maybe<ConsumableUpdateOneRequiredInput>;
  amount?: Maybe<Int>;
}

export interface OrderEquipmentCreateManyInput {
  create?: Maybe<OrderEquipmentCreateInput[] | OrderEquipmentCreateInput>;
  connect?: Maybe<
    OrderEquipmentWhereUniqueInput[] | OrderEquipmentWhereUniqueInput
  >;
}

export interface OrderUpdateManyMutationInput {
  status?: Maybe<OrderStatus>;
  observations?: Maybe<String>;
  closedAt?: Maybe<DateTimeInput>;
}

export interface OrderEquipmentCreateInput {
  id?: Maybe<Int>;
  equipment: EquipmentCreateOneInput;
  amount: Int;
  takenAt: DateTimeInput;
  returnedAt?: Maybe<DateTimeInput>;
}

export interface OrderConsumableUpdateManyWithWhereNestedInput {
  where: OrderConsumableScalarWhereInput;
  data: OrderConsumableUpdateManyDataInput;
}

export interface EquipmentCreateOneInput {
  create?: Maybe<EquipmentCreateInput>;
  connect?: Maybe<EquipmentWhereUniqueInput>;
}

export interface OrderConsumableScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<
    OrderConsumableScalarWhereInput[] | OrderConsumableScalarWhereInput
  >;
  OR?: Maybe<
    OrderConsumableScalarWhereInput[] | OrderConsumableScalarWhereInput
  >;
  NOT?: Maybe<
    OrderConsumableScalarWhereInput[] | OrderConsumableScalarWhereInput
  >;
}

export interface OrderEquipmentUpdateDataInput {
  equipment?: Maybe<EquipmentUpdateOneRequiredInput>;
  amount?: Maybe<Int>;
  takenAt?: Maybe<DateTimeInput>;
  returnedAt?: Maybe<DateTimeInput>;
}

export interface ConsumableUpsertNestedInput {
  update: ConsumableUpdateDataInput;
  create: ConsumableCreateInput;
}

export interface OrderConsumableCreateInput {
  id?: Maybe<Int>;
  consumable: ConsumableCreateOneInput;
  amount: Int;
}

export interface ConsumableUpdateOneRequiredInput {
  create?: Maybe<ConsumableCreateInput>;
  update?: Maybe<ConsumableUpdateDataInput>;
  upsert?: Maybe<ConsumableUpsertNestedInput>;
  connect?: Maybe<ConsumableWhereUniqueInput>;
}

export interface ConsumableCreateOneInput {
  create?: Maybe<ConsumableCreateInput>;
  connect?: Maybe<ConsumableWhereUniqueInput>;
}

export interface OrderConsumableUpdateWithWhereUniqueNestedInput {
  where: OrderConsumableWhereUniqueInput;
  data: OrderConsumableUpdateDataInput;
}

export interface OrderUpdateInput {
  status?: Maybe<OrderStatus>;
  observations?: Maybe<String>;
  closedAt?: Maybe<DateTimeInput>;
  project?: Maybe<ProjectUpdateOneRequiredInput>;
  administrator?: Maybe<UserUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  takenEquipments?: Maybe<OrderEquipmentUpdateManyInput>;
  takenConsumables?: Maybe<OrderConsumableUpdateManyInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ProjectUpdateOneRequiredInput {
  create?: Maybe<ProjectCreateInput>;
  update?: Maybe<ProjectUpdateDataInput>;
  upsert?: Maybe<ProjectUpsertNestedInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface OrderEquipmentUpdateManyWithWhereNestedInput {
  where: OrderEquipmentScalarWhereInput;
  data: OrderEquipmentUpdateManyDataInput;
}

export interface ProjectUpdateDataInput {
  projectName?: Maybe<String>;
  manager?: Maybe<UserUpdateOneRequiredInput>;
  chef?: Maybe<UserUpdateOneRequiredInput>;
  status?: Maybe<ProjectStatus>;
  members?: Maybe<UserUpdateManyInput>;
  equipments?: Maybe<EquipmentUpdateManyInput>;
  consumables?: Maybe<ConsumableUpdateManyInput>;
  description?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  approvalDate?: Maybe<DateTimeInput>;
  expirationDate?: Maybe<DateTimeInput>;
}

export interface OrderEquipmentUpsertWithWhereUniqueNestedInput {
  where: OrderEquipmentWhereUniqueInput;
  update: OrderEquipmentUpdateDataInput;
  create: OrderEquipmentCreateInput;
}

export interface OrderEquipmentUpdateWithWhereUniqueNestedInput {
  where: OrderEquipmentWhereUniqueInput;
  data: OrderEquipmentUpdateDataInput;
}

export interface ConsumableCreateInput {
  id?: Maybe<Int>;
  serial: String;
  name: String;
  description: String;
  available?: Maybe<Boolean>;
  stock: Int;
  minimalStock: Int;
  price?: Maybe<Float>;
  consumableType: String;
}

export interface OrderEquipmentUpdateManyInput {
  create?: Maybe<OrderEquipmentCreateInput[] | OrderEquipmentCreateInput>;
  update?: Maybe<
    | OrderEquipmentUpdateWithWhereUniqueNestedInput[]
    | OrderEquipmentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrderEquipmentUpsertWithWhereUniqueNestedInput[]
    | OrderEquipmentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    OrderEquipmentWhereUniqueInput[] | OrderEquipmentWhereUniqueInput
  >;
  connect?: Maybe<
    OrderEquipmentWhereUniqueInput[] | OrderEquipmentWhereUniqueInput
  >;
  set?: Maybe<
    OrderEquipmentWhereUniqueInput[] | OrderEquipmentWhereUniqueInput
  >;
  disconnect?: Maybe<
    OrderEquipmentWhereUniqueInput[] | OrderEquipmentWhereUniqueInput
  >;
  deleteMany?: Maybe<
    OrderEquipmentScalarWhereInput[] | OrderEquipmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrderEquipmentUpdateManyWithWhereNestedInput[]
    | OrderEquipmentUpdateManyWithWhereNestedInput
  >;
}

export interface ConsumableUpdateManyMutationInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  minimalStock?: Maybe<Int>;
  price?: Maybe<Float>;
  consumableType?: Maybe<String>;
}

export interface ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput;
  create: ProjectCreateInput;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface EquipmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EquipmentWhereInput>;
  AND?: Maybe<
    EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface OrderEquipmentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  equipment?: Maybe<EquipmentWhereInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  takenAt?: Maybe<DateTimeInput>;
  takenAt_not?: Maybe<DateTimeInput>;
  takenAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  takenAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  takenAt_lt?: Maybe<DateTimeInput>;
  takenAt_lte?: Maybe<DateTimeInput>;
  takenAt_gt?: Maybe<DateTimeInput>;
  takenAt_gte?: Maybe<DateTimeInput>;
  returnedAt?: Maybe<DateTimeInput>;
  returnedAt_not?: Maybe<DateTimeInput>;
  returnedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnedAt_lt?: Maybe<DateTimeInput>;
  returnedAt_lte?: Maybe<DateTimeInput>;
  returnedAt_gt?: Maybe<DateTimeInput>;
  returnedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderEquipmentWhereInput[] | OrderEquipmentWhereInput>;
  OR?: Maybe<OrderEquipmentWhereInput[] | OrderEquipmentWhereInput>;
  NOT?: Maybe<OrderEquipmentWhereInput[] | OrderEquipmentWhereInput>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProjectUpdateManyMutationInput {
  projectName?: Maybe<String>;
  status?: Maybe<ProjectStatus>;
  description?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  approvalDate?: Maybe<DateTimeInput>;
  expirationDate?: Maybe<DateTimeInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface OrderEquipmentUpdateManyMutationInput {
  amount?: Maybe<Int>;
  takenAt?: Maybe<DateTimeInput>;
  returnedAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export type OrderConsumableWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
}

export type OrderEquipmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface EquipmentUpdateManyInput {
  create?: Maybe<EquipmentCreateInput[] | EquipmentCreateInput>;
  update?: Maybe<
    | EquipmentUpdateWithWhereUniqueNestedInput[]
    | EquipmentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EquipmentUpsertWithWhereUniqueNestedInput[]
    | EquipmentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput>;
  connect?: Maybe<EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput>;
  set?: Maybe<EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput>;
  disconnect?: Maybe<EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput>;
  deleteMany?: Maybe<EquipmentScalarWhereInput[] | EquipmentScalarWhereInput>;
  updateMany?: Maybe<
    | EquipmentUpdateManyWithWhereNestedInput[]
    | EquipmentUpdateManyWithWhereNestedInput
  >;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface EquipmentUpdateWithWhereUniqueNestedInput {
  where: EquipmentWhereUniqueInput;
  data: EquipmentUpdateDataInput;
}

export interface OrderConsumableUpdateManyInput {
  create?: Maybe<OrderConsumableCreateInput[] | OrderConsumableCreateInput>;
  update?: Maybe<
    | OrderConsumableUpdateWithWhereUniqueNestedInput[]
    | OrderConsumableUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrderConsumableUpsertWithWhereUniqueNestedInput[]
    | OrderConsumableUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    OrderConsumableWhereUniqueInput[] | OrderConsumableWhereUniqueInput
  >;
  connect?: Maybe<
    OrderConsumableWhereUniqueInput[] | OrderConsumableWhereUniqueInput
  >;
  set?: Maybe<
    OrderConsumableWhereUniqueInput[] | OrderConsumableWhereUniqueInput
  >;
  disconnect?: Maybe<
    OrderConsumableWhereUniqueInput[] | OrderConsumableWhereUniqueInput
  >;
  deleteMany?: Maybe<
    OrderConsumableScalarWhereInput[] | OrderConsumableScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrderConsumableUpdateManyWithWhereNestedInput[]
    | OrderConsumableUpdateManyWithWhereNestedInput
  >;
}

export interface EquipmentUpdateDataInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  usable?: Maybe<Boolean>;
}

export interface OrderEquipmentScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  takenAt?: Maybe<DateTimeInput>;
  takenAt_not?: Maybe<DateTimeInput>;
  takenAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  takenAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  takenAt_lt?: Maybe<DateTimeInput>;
  takenAt_lte?: Maybe<DateTimeInput>;
  takenAt_gt?: Maybe<DateTimeInput>;
  takenAt_gte?: Maybe<DateTimeInput>;
  returnedAt?: Maybe<DateTimeInput>;
  returnedAt_not?: Maybe<DateTimeInput>;
  returnedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnedAt_lt?: Maybe<DateTimeInput>;
  returnedAt_lte?: Maybe<DateTimeInput>;
  returnedAt_gt?: Maybe<DateTimeInput>;
  returnedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    OrderEquipmentScalarWhereInput[] | OrderEquipmentScalarWhereInput
  >;
  OR?: Maybe<OrderEquipmentScalarWhereInput[] | OrderEquipmentScalarWhereInput>;
  NOT?: Maybe<
    OrderEquipmentScalarWhereInput[] | OrderEquipmentScalarWhereInput
  >;
}

export interface EquipmentUpsertWithWhereUniqueNestedInput {
  where: EquipmentWhereUniqueInput;
  update: EquipmentUpdateDataInput;
  create: EquipmentCreateInput;
}

export interface ConsumableUpdateInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  minimalStock?: Maybe<Int>;
  price?: Maybe<Float>;
  consumableType?: Maybe<String>;
}

export interface EquipmentScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  serial?: Maybe<String>;
  serial_not?: Maybe<String>;
  serial_in?: Maybe<String[] | String>;
  serial_not_in?: Maybe<String[] | String>;
  serial_lt?: Maybe<String>;
  serial_lte?: Maybe<String>;
  serial_gt?: Maybe<String>;
  serial_gte?: Maybe<String>;
  serial_contains?: Maybe<String>;
  serial_not_contains?: Maybe<String>;
  serial_starts_with?: Maybe<String>;
  serial_not_starts_with?: Maybe<String>;
  serial_ends_with?: Maybe<String>;
  serial_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  usable?: Maybe<Boolean>;
  usable_not?: Maybe<Boolean>;
  AND?: Maybe<EquipmentScalarWhereInput[] | EquipmentScalarWhereInput>;
  OR?: Maybe<EquipmentScalarWhereInput[] | EquipmentScalarWhereInput>;
  NOT?: Maybe<EquipmentScalarWhereInput[] | EquipmentScalarWhereInput>;
}

export interface OrderConsumableSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderConsumableWhereInput>;
  AND?: Maybe<
    | OrderConsumableSubscriptionWhereInput[]
    | OrderConsumableSubscriptionWhereInput
  >;
  OR?: Maybe<
    | OrderConsumableSubscriptionWhereInput[]
    | OrderConsumableSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | OrderConsumableSubscriptionWhereInput[]
    | OrderConsumableSubscriptionWhereInput
  >;
}

export interface EquipmentUpdateManyWithWhereNestedInput {
  where: EquipmentScalarWhereInput;
  data: EquipmentUpdateManyDataInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface EquipmentUpdateManyDataInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  usable?: Maybe<Boolean>;
}

export interface OrderConsumableUpdateManyMutationInput {
  amount?: Maybe<Int>;
}

export interface ConsumableUpdateManyInput {
  create?: Maybe<ConsumableCreateInput[] | ConsumableCreateInput>;
  update?: Maybe<
    | ConsumableUpdateWithWhereUniqueNestedInput[]
    | ConsumableUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ConsumableUpsertWithWhereUniqueNestedInput[]
    | ConsumableUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ConsumableWhereUniqueInput[] | ConsumableWhereUniqueInput>;
  connect?: Maybe<ConsumableWhereUniqueInput[] | ConsumableWhereUniqueInput>;
  set?: Maybe<ConsumableWhereUniqueInput[] | ConsumableWhereUniqueInput>;
  disconnect?: Maybe<ConsumableWhereUniqueInput[] | ConsumableWhereUniqueInput>;
  deleteMany?: Maybe<ConsumableScalarWhereInput[] | ConsumableScalarWhereInput>;
  updateMany?: Maybe<
    | ConsumableUpdateManyWithWhereNestedInput[]
    | ConsumableUpdateManyWithWhereNestedInput
  >;
}

export interface OrderConsumableUpsertWithWhereUniqueNestedInput {
  where: OrderConsumableWhereUniqueInput;
  update: OrderConsumableUpdateDataInput;
  create: OrderConsumableCreateInput;
}

export interface ConsumableUpdateWithWhereUniqueNestedInput {
  where: ConsumableWhereUniqueInput;
  data: ConsumableUpdateDataInput;
}

export interface OrderEquipmentUpdateManyDataInput {
  amount?: Maybe<Int>;
  takenAt?: Maybe<DateTimeInput>;
  returnedAt?: Maybe<DateTimeInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ConsumableUpdateManyWithWhereNestedInput {
  where: ConsumableScalarWhereInput;
  data: ConsumableUpdateManyDataInput;
}

export interface ConsumableScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  serial?: Maybe<String>;
  serial_not?: Maybe<String>;
  serial_in?: Maybe<String[] | String>;
  serial_not_in?: Maybe<String[] | String>;
  serial_lt?: Maybe<String>;
  serial_lte?: Maybe<String>;
  serial_gt?: Maybe<String>;
  serial_gte?: Maybe<String>;
  serial_contains?: Maybe<String>;
  serial_not_contains?: Maybe<String>;
  serial_starts_with?: Maybe<String>;
  serial_not_starts_with?: Maybe<String>;
  serial_ends_with?: Maybe<String>;
  serial_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  minimalStock?: Maybe<Int>;
  minimalStock_not?: Maybe<Int>;
  minimalStock_in?: Maybe<Int[] | Int>;
  minimalStock_not_in?: Maybe<Int[] | Int>;
  minimalStock_lt?: Maybe<Int>;
  minimalStock_lte?: Maybe<Int>;
  minimalStock_gt?: Maybe<Int>;
  minimalStock_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  consumableType?: Maybe<String>;
  consumableType_not?: Maybe<String>;
  consumableType_in?: Maybe<String[] | String>;
  consumableType_not_in?: Maybe<String[] | String>;
  consumableType_lt?: Maybe<String>;
  consumableType_lte?: Maybe<String>;
  consumableType_gt?: Maybe<String>;
  consumableType_gte?: Maybe<String>;
  consumableType_contains?: Maybe<String>;
  consumableType_not_contains?: Maybe<String>;
  consumableType_starts_with?: Maybe<String>;
  consumableType_not_starts_with?: Maybe<String>;
  consumableType_ends_with?: Maybe<String>;
  consumableType_not_ends_with?: Maybe<String>;
  AND?: Maybe<ConsumableScalarWhereInput[] | ConsumableScalarWhereInput>;
  OR?: Maybe<ConsumableScalarWhereInput[] | ConsumableScalarWhereInput>;
  NOT?: Maybe<ConsumableScalarWhereInput[] | ConsumableScalarWhereInput>;
}

export interface ConsumableUpsertWithWhereUniqueNestedInput {
  where: ConsumableWhereUniqueInput;
  update: ConsumableUpdateDataInput;
  create: ConsumableCreateInput;
}

export interface ConsumableUpdateDataInput {
  serial?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  available?: Maybe<Boolean>;
  stock?: Maybe<Int>;
  minimalStock?: Maybe<Int>;
  price?: Maybe<Float>;
  consumableType?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface OrderConsumableUpdateDataInput {
  consumable?: Maybe<ConsumableUpdateOneRequiredInput>;
  amount?: Maybe<Int>;
}

export interface OrderConsumableUpdateManyDataInput {
  amount?: Maybe<Int>;
}

export interface OrderWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  observations?: Maybe<String>;
  observations_not?: Maybe<String>;
  observations_in?: Maybe<String[] | String>;
  observations_not_in?: Maybe<String[] | String>;
  observations_lt?: Maybe<String>;
  observations_lte?: Maybe<String>;
  observations_gt?: Maybe<String>;
  observations_gte?: Maybe<String>;
  observations_contains?: Maybe<String>;
  observations_not_contains?: Maybe<String>;
  observations_starts_with?: Maybe<String>;
  observations_not_starts_with?: Maybe<String>;
  observations_ends_with?: Maybe<String>;
  observations_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  closedAt?: Maybe<DateTimeInput>;
  closedAt_not?: Maybe<DateTimeInput>;
  closedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closedAt_lt?: Maybe<DateTimeInput>;
  closedAt_lte?: Maybe<DateTimeInput>;
  closedAt_gt?: Maybe<DateTimeInput>;
  closedAt_gte?: Maybe<DateTimeInput>;
  project?: Maybe<ProjectWhereInput>;
  administrator?: Maybe<UserWhereInput>;
  user?: Maybe<UserWhereInput>;
  takenEquipments_every?: Maybe<OrderEquipmentWhereInput>;
  takenEquipments_some?: Maybe<OrderEquipmentWhereInput>;
  takenEquipments_none?: Maybe<OrderEquipmentWhereInput>;
  takenConsumables_every?: Maybe<OrderConsumableWhereInput>;
  takenConsumables_some?: Maybe<OrderConsumableWhereInput>;
  takenConsumables_none?: Maybe<OrderConsumableWhereInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: Int;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface EquipmentConnection {
  pageInfo: PageInfo;
  edges: EquipmentEdge[];
}

export interface EquipmentConnectionPromise
  extends Promise<EquipmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EquipmentEdge>>() => T;
  aggregate: <T = AggregateEquipmentPromise>() => T;
}

export interface EquipmentConnectionSubscription
  extends Promise<AsyncIterator<EquipmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EquipmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEquipmentSubscription>() => T;
}

export interface EquipmentEdge {
  node: Equipment;
  cursor: String;
}

export interface EquipmentEdgePromise
  extends Promise<EquipmentEdge>,
    Fragmentable {
  node: <T = EquipmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EquipmentEdgeSubscription
  extends Promise<AsyncIterator<EquipmentEdge>>,
    Fragmentable {
  node: <T = EquipmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderEquipment {
  id: Int;
  amount: Int;
  takenAt: DateTimeOutput;
  returnedAt?: DateTimeOutput;
}

export interface OrderEquipmentPromise
  extends Promise<OrderEquipment>,
    Fragmentable {
  id: () => Promise<Int>;
  equipment: <T = EquipmentPromise>() => T;
  amount: () => Promise<Int>;
  takenAt: () => Promise<DateTimeOutput>;
  returnedAt: () => Promise<DateTimeOutput>;
}

export interface OrderEquipmentSubscription
  extends Promise<AsyncIterator<OrderEquipment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  equipment: <T = EquipmentSubscription>() => T;
  amount: () => Promise<AsyncIterator<Int>>;
  takenAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  returnedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderEquipmentNullablePromise
  extends Promise<OrderEquipment | null>,
    Fragmentable {
  id: () => Promise<Int>;
  equipment: <T = EquipmentPromise>() => T;
  amount: () => Promise<Int>;
  takenAt: () => Promise<DateTimeOutput>;
  returnedAt: () => Promise<DateTimeOutput>;
}

export interface Equipment {
  id: Int;
  serial: String;
  name: String;
  description: String;
  available: Boolean;
  stock: Int;
  usable: Boolean;
}

export interface EquipmentPromise extends Promise<Equipment>, Fragmentable {
  id: () => Promise<Int>;
  serial: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  available: () => Promise<Boolean>;
  stock: () => Promise<Int>;
  usable: () => Promise<Boolean>;
}

export interface EquipmentSubscription
  extends Promise<AsyncIterator<Equipment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serial: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  stock: () => Promise<AsyncIterator<Int>>;
  usable: () => Promise<AsyncIterator<Boolean>>;
}

export interface EquipmentNullablePromise
  extends Promise<Equipment | null>,
    Fragmentable {
  id: () => Promise<Int>;
  serial: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  available: () => Promise<Boolean>;
  stock: () => Promise<Int>;
  usable: () => Promise<Boolean>;
}

export interface OrderConsumable {
  id: Int;
  amount: Int;
}

export interface OrderConsumablePromise
  extends Promise<OrderConsumable>,
    Fragmentable {
  id: () => Promise<Int>;
  consumable: <T = ConsumablePromise>() => T;
  amount: () => Promise<Int>;
}

export interface OrderConsumableSubscription
  extends Promise<AsyncIterator<OrderConsumable>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  consumable: <T = ConsumableSubscription>() => T;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConsumableNullablePromise
  extends Promise<OrderConsumable | null>,
    Fragmentable {
  id: () => Promise<Int>;
  consumable: <T = ConsumablePromise>() => T;
  amount: () => Promise<Int>;
}

export interface OrderEquipmentPreviousValues {
  id: Int;
  amount: Int;
  takenAt: DateTimeOutput;
  returnedAt?: DateTimeOutput;
}

export interface OrderEquipmentPreviousValuesPromise
  extends Promise<OrderEquipmentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  takenAt: () => Promise<DateTimeOutput>;
  returnedAt: () => Promise<DateTimeOutput>;
}

export interface OrderEquipmentPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderEquipmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  takenAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  returnedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateConsumable {
  count: Int;
}

export interface AggregateConsumablePromise
  extends Promise<AggregateConsumable>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConsumableSubscription
  extends Promise<AsyncIterator<AggregateConsumable>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConsumableConnection {
  pageInfo: PageInfo;
  edges: ConsumableEdge[];
}

export interface ConsumableConnectionPromise
  extends Promise<ConsumableConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConsumableEdge>>() => T;
  aggregate: <T = AggregateConsumablePromise>() => T;
}

export interface ConsumableConnectionSubscription
  extends Promise<AsyncIterator<ConsumableConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConsumableEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConsumableSubscription>() => T;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Consumable {
  id: Int;
  serial: String;
  name: String;
  description: String;
  available: Boolean;
  stock: Int;
  minimalStock: Int;
  price?: Float;
  consumableType: String;
}

export interface ConsumablePromise extends Promise<Consumable>, Fragmentable {
  id: () => Promise<Int>;
  serial: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  available: () => Promise<Boolean>;
  stock: () => Promise<Int>;
  minimalStock: () => Promise<Int>;
  price: () => Promise<Float>;
  consumableType: () => Promise<String>;
}

export interface ConsumableSubscription
  extends Promise<AsyncIterator<Consumable>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serial: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  stock: () => Promise<AsyncIterator<Int>>;
  minimalStock: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  consumableType: () => Promise<AsyncIterator<String>>;
}

export interface ConsumableNullablePromise
  extends Promise<Consumable | null>,
    Fragmentable {
  id: () => Promise<Int>;
  serial: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  available: () => Promise<Boolean>;
  stock: () => Promise<Int>;
  minimalStock: () => Promise<Int>;
  price: () => Promise<Float>;
  consumableType: () => Promise<String>;
}

export interface AggregateEquipment {
  count: Int;
}

export interface AggregateEquipmentPromise
  extends Promise<AggregateEquipment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEquipmentSubscription
  extends Promise<AsyncIterator<AggregateEquipment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConsumableSubscriptionPayload {
  mutation: MutationType;
  node: Consumable;
  updatedFields: String[];
  previousValues: ConsumablePreviousValues;
}

export interface ConsumableSubscriptionPayloadPromise
  extends Promise<ConsumableSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConsumablePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConsumablePreviousValuesPromise>() => T;
}

export interface ConsumableSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConsumableSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConsumableSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConsumablePreviousValuesSubscription>() => T;
}

export interface OrderEquipmentEdge {
  node: OrderEquipment;
  cursor: String;
}

export interface OrderEquipmentEdgePromise
  extends Promise<OrderEquipmentEdge>,
    Fragmentable {
  node: <T = OrderEquipmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEquipmentEdgeSubscription
  extends Promise<AsyncIterator<OrderEquipmentEdge>>,
    Fragmentable {
  node: <T = OrderEquipmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConsumablePreviousValues {
  id: Int;
  serial: String;
  name: String;
  description: String;
  available: Boolean;
  stock: Int;
  minimalStock: Int;
  price?: Float;
  consumableType: String;
}

export interface ConsumablePreviousValuesPromise
  extends Promise<ConsumablePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  serial: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  available: () => Promise<Boolean>;
  stock: () => Promise<Int>;
  minimalStock: () => Promise<Int>;
  price: () => Promise<Float>;
  consumableType: () => Promise<String>;
}

export interface ConsumablePreviousValuesSubscription
  extends Promise<AsyncIterator<ConsumablePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serial: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  stock: () => Promise<AsyncIterator<Int>>;
  minimalStock: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  consumableType: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderConsumable {
  count: Int;
}

export interface AggregateOrderConsumablePromise
  extends Promise<AggregateOrderConsumable>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderConsumableSubscription
  extends Promise<AsyncIterator<AggregateOrderConsumable>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: Int;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface OrderConsumableConnection {
  pageInfo: PageInfo;
  edges: OrderConsumableEdge[];
}

export interface OrderConsumableConnectionPromise
  extends Promise<OrderConsumableConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderConsumableEdge>>() => T;
  aggregate: <T = AggregateOrderConsumablePromise>() => T;
}

export interface OrderConsumableConnectionSubscription
  extends Promise<AsyncIterator<OrderConsumableConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderConsumableEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderConsumableSubscription>() => T;
}

export interface EquipmentSubscriptionPayload {
  mutation: MutationType;
  node: Equipment;
  updatedFields: String[];
  previousValues: EquipmentPreviousValues;
}

export interface EquipmentSubscriptionPayloadPromise
  extends Promise<EquipmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EquipmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EquipmentPreviousValuesPromise>() => T;
}

export interface EquipmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EquipmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EquipmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EquipmentPreviousValuesSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EquipmentPreviousValues {
  id: Int;
  serial: String;
  name: String;
  description: String;
  available: Boolean;
  stock: Int;
  usable: Boolean;
}

export interface EquipmentPreviousValuesPromise
  extends Promise<EquipmentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  serial: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  available: () => Promise<Boolean>;
  stock: () => Promise<Int>;
  usable: () => Promise<Boolean>;
}

export interface EquipmentPreviousValuesSubscription
  extends Promise<AsyncIterator<EquipmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serial: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  stock: () => Promise<AsyncIterator<Int>>;
  usable: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProjectPreviousValues {
  id: Int;
  projectName: String;
  status: ProjectStatus;
  description?: String;
  startDate?: DateTimeOutput;
  approvalDate?: DateTimeOutput;
  expirationDate?: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  projectName: () => Promise<String>;
  status: () => Promise<ProjectStatus>;
  description: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  approvalDate: () => Promise<DateTimeOutput>;
  expirationDate: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  projectName: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  approvalDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expirationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Project {
  id: Int;
  projectName: String;
  status: ProjectStatus;
  description?: String;
  startDate?: DateTimeOutput;
  approvalDate?: DateTimeOutput;
  expirationDate?: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<Int>;
  projectName: () => Promise<String>;
  manager: <T = UserPromise>() => T;
  chef: <T = UserPromise>() => T;
  status: () => Promise<ProjectStatus>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  equipments: <T = FragmentableArray<Equipment>>(args?: {
    where?: EquipmentWhereInput;
    orderBy?: EquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  consumables: <T = FragmentableArray<Consumable>>(args?: {
    where?: ConsumableWhereInput;
    orderBy?: ConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  approvalDate: () => Promise<DateTimeOutput>;
  expirationDate: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  projectName: () => Promise<AsyncIterator<String>>;
  manager: <T = UserSubscription>() => T;
  chef: <T = UserSubscription>() => T;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  equipments: <T = Promise<AsyncIterator<EquipmentSubscription>>>(args?: {
    where?: EquipmentWhereInput;
    orderBy?: EquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  consumables: <T = Promise<AsyncIterator<ConsumableSubscription>>>(args?: {
    where?: ConsumableWhereInput;
    orderBy?: ConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  approvalDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expirationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<Int>;
  projectName: () => Promise<String>;
  manager: <T = UserPromise>() => T;
  chef: <T = UserPromise>() => T;
  status: () => Promise<ProjectStatus>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  equipments: <T = FragmentableArray<Equipment>>(args?: {
    where?: EquipmentWhereInput;
    orderBy?: EquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  consumables: <T = FragmentableArray<Consumable>>(args?: {
    where?: ConsumableWhereInput;
    orderBy?: ConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  approvalDate: () => Promise<DateTimeOutput>;
  expirationDate: () => Promise<DateTimeOutput>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface OrderPreviousValues {
  id: Int;
  status: OrderStatus;
  observations?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  closedAt?: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  status: () => Promise<OrderStatus>;
  observations: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  closedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  observations: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  closedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderEquipmentConnection {
  pageInfo: PageInfo;
  edges: OrderEquipmentEdge[];
}

export interface OrderEquipmentConnectionPromise
  extends Promise<OrderEquipmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEquipmentEdge>>() => T;
  aggregate: <T = AggregateOrderEquipmentPromise>() => T;
}

export interface OrderEquipmentConnectionSubscription
  extends Promise<AsyncIterator<OrderEquipmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEquipmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderEquipmentSubscription>() => T;
}

export interface Order {
  id: Int;
  status: OrderStatus;
  observations?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  closedAt?: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<Int>;
  status: () => Promise<OrderStatus>;
  observations: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  closedAt: () => Promise<DateTimeOutput>;
  project: <T = ProjectPromise>() => T;
  administrator: <T = UserPromise>() => T;
  user: <T = UserPromise>() => T;
  takenEquipments: <T = FragmentableArray<OrderEquipment>>(args?: {
    where?: OrderEquipmentWhereInput;
    orderBy?: OrderEquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  takenConsumables: <T = FragmentableArray<OrderConsumable>>(args?: {
    where?: OrderConsumableWhereInput;
    orderBy?: OrderConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  observations: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  closedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  project: <T = ProjectSubscription>() => T;
  administrator: <T = UserSubscription>() => T;
  user: <T = UserSubscription>() => T;
  takenEquipments: <
    T = Promise<AsyncIterator<OrderEquipmentSubscription>>
  >(args?: {
    where?: OrderEquipmentWhereInput;
    orderBy?: OrderEquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  takenConsumables: <
    T = Promise<AsyncIterator<OrderConsumableSubscription>>
  >(args?: {
    where?: OrderConsumableWhereInput;
    orderBy?: OrderConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<Int>;
  status: () => Promise<OrderStatus>;
  observations: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  closedAt: () => Promise<DateTimeOutput>;
  project: <T = ProjectPromise>() => T;
  administrator: <T = UserPromise>() => T;
  user: <T = UserPromise>() => T;
  takenEquipments: <T = FragmentableArray<OrderEquipment>>(args?: {
    where?: OrderEquipmentWhereInput;
    orderBy?: OrderEquipmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  takenConsumables: <T = FragmentableArray<OrderConsumable>>(args?: {
    where?: OrderConsumableWhereInput;
    orderBy?: OrderConsumableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OrderEquipmentSubscriptionPayload {
  mutation: MutationType;
  node: OrderEquipment;
  updatedFields: String[];
  previousValues: OrderEquipmentPreviousValues;
}

export interface OrderEquipmentSubscriptionPayloadPromise
  extends Promise<OrderEquipmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderEquipmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderEquipmentPreviousValuesPromise>() => T;
}

export interface OrderEquipmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderEquipmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderEquipmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderEquipmentPreviousValuesSubscription>() => T;
}

export interface ConsumableEdge {
  node: Consumable;
  cursor: String;
}

export interface ConsumableEdgePromise
  extends Promise<ConsumableEdge>,
    Fragmentable {
  node: <T = ConsumablePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConsumableEdgeSubscription
  extends Promise<AsyncIterator<ConsumableEdge>>,
    Fragmentable {
  node: <T = ConsumableSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderConsumablePreviousValues {
  id: Int;
  amount: Int;
}

export interface OrderConsumablePreviousValuesPromise
  extends Promise<OrderConsumablePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
}

export interface OrderConsumablePreviousValuesSubscription
  extends Promise<AsyncIterator<OrderConsumablePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConsumableSubscriptionPayload {
  mutation: MutationType;
  node: OrderConsumable;
  updatedFields: String[];
  previousValues: OrderConsumablePreviousValues;
}

export interface OrderConsumableSubscriptionPayloadPromise
  extends Promise<OrderConsumableSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderConsumablePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderConsumablePreviousValuesPromise>() => T;
}

export interface OrderConsumableSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderConsumableSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderConsumableSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderConsumablePreviousValuesSubscription>() => T;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderConsumableEdge {
  node: OrderConsumable;
  cursor: String;
}

export interface OrderConsumableEdgePromise
  extends Promise<OrderConsumableEdge>,
    Fragmentable {
  node: <T = OrderConsumablePromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderConsumableEdgeSubscription
  extends Promise<AsyncIterator<OrderConsumableEdge>>,
    Fragmentable {
  node: <T = OrderConsumableSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderEquipment {
  count: Int;
}

export interface AggregateOrderEquipmentPromise
  extends Promise<AggregateOrderEquipment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderEquipmentSubscription
  extends Promise<AsyncIterator<AggregateOrderEquipment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "ProjectStatus",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderStatus",
    embedded: false
  },
  {
    name: "Equipment",
    embedded: false
  },
  {
    name: "Consumable",
    embedded: false
  },
  {
    name: "OrderEquipment",
    embedded: false
  },
  {
    name: "OrderConsumable",
    embedded: false
  },
  {
    name: "OrderTakenConsumables",
    embedded: false
  },
  {
    name: "OrderTakenEquipments",
    embedded: false
  },
  {
    name: "ProjectConsumables",
    embedded: false
  },
  {
    name: "ProjectEquipments",
    embedded: false
  },
  {
    name: "ProjectMembers",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
