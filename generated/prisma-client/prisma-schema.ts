// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateConsumable {
  count: Int!
}

type AggregateEquipment {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderConsumable {
  count: Int!
}

type AggregateOrderEquipment {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Consumable {
  id: Int!
  serial: String!
  name: String!
  description: String!
  available: Boolean!
  stock: Int!
  minimalStock: Int!
  price: Float
  consumableType: String!
}

type ConsumableConnection {
  pageInfo: PageInfo!
  edges: [ConsumableEdge]!
  aggregate: AggregateConsumable!
}

input ConsumableCreateInput {
  id: Int
  serial: String!
  name: String!
  description: String!
  available: Boolean
  stock: Int!
  minimalStock: Int!
  price: Float
  consumableType: String!
}

input ConsumableCreateManyInput {
  create: [ConsumableCreateInput!]
  connect: [ConsumableWhereUniqueInput!]
}

input ConsumableCreateOneInput {
  create: ConsumableCreateInput
  connect: ConsumableWhereUniqueInput
}

type ConsumableEdge {
  node: Consumable!
  cursor: String!
}

enum ConsumableOrderByInput {
  id_ASC
  id_DESC
  serial_ASC
  serial_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  available_ASC
  available_DESC
  stock_ASC
  stock_DESC
  minimalStock_ASC
  minimalStock_DESC
  price_ASC
  price_DESC
  consumableType_ASC
  consumableType_DESC
}

type ConsumablePreviousValues {
  id: Int!
  serial: String!
  name: String!
  description: String!
  available: Boolean!
  stock: Int!
  minimalStock: Int!
  price: Float
  consumableType: String!
}

input ConsumableScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serial: String
  serial_not: String
  serial_in: [String!]
  serial_not_in: [String!]
  serial_lt: String
  serial_lte: String
  serial_gt: String
  serial_gte: String
  serial_contains: String
  serial_not_contains: String
  serial_starts_with: String
  serial_not_starts_with: String
  serial_ends_with: String
  serial_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  available: Boolean
  available_not: Boolean
  stock: Int
  stock_not: Int
  stock_in: [Int!]
  stock_not_in: [Int!]
  stock_lt: Int
  stock_lte: Int
  stock_gt: Int
  stock_gte: Int
  minimalStock: Int
  minimalStock_not: Int
  minimalStock_in: [Int!]
  minimalStock_not_in: [Int!]
  minimalStock_lt: Int
  minimalStock_lte: Int
  minimalStock_gt: Int
  minimalStock_gte: Int
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  consumableType: String
  consumableType_not: String
  consumableType_in: [String!]
  consumableType_not_in: [String!]
  consumableType_lt: String
  consumableType_lte: String
  consumableType_gt: String
  consumableType_gte: String
  consumableType_contains: String
  consumableType_not_contains: String
  consumableType_starts_with: String
  consumableType_not_starts_with: String
  consumableType_ends_with: String
  consumableType_not_ends_with: String
  AND: [ConsumableScalarWhereInput!]
  OR: [ConsumableScalarWhereInput!]
  NOT: [ConsumableScalarWhereInput!]
}

type ConsumableSubscriptionPayload {
  mutation: MutationType!
  node: Consumable
  updatedFields: [String!]
  previousValues: ConsumablePreviousValues
}

input ConsumableSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConsumableWhereInput
  AND: [ConsumableSubscriptionWhereInput!]
  OR: [ConsumableSubscriptionWhereInput!]
  NOT: [ConsumableSubscriptionWhereInput!]
}

input ConsumableUpdateDataInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  minimalStock: Int
  price: Float
  consumableType: String
}

input ConsumableUpdateInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  minimalStock: Int
  price: Float
  consumableType: String
}

input ConsumableUpdateManyDataInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  minimalStock: Int
  price: Float
  consumableType: String
}

input ConsumableUpdateManyInput {
  create: [ConsumableCreateInput!]
  update: [ConsumableUpdateWithWhereUniqueNestedInput!]
  upsert: [ConsumableUpsertWithWhereUniqueNestedInput!]
  delete: [ConsumableWhereUniqueInput!]
  connect: [ConsumableWhereUniqueInput!]
  set: [ConsumableWhereUniqueInput!]
  disconnect: [ConsumableWhereUniqueInput!]
  deleteMany: [ConsumableScalarWhereInput!]
  updateMany: [ConsumableUpdateManyWithWhereNestedInput!]
}

input ConsumableUpdateManyMutationInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  minimalStock: Int
  price: Float
  consumableType: String
}

input ConsumableUpdateManyWithWhereNestedInput {
  where: ConsumableScalarWhereInput!
  data: ConsumableUpdateManyDataInput!
}

input ConsumableUpdateOneRequiredInput {
  create: ConsumableCreateInput
  update: ConsumableUpdateDataInput
  upsert: ConsumableUpsertNestedInput
  connect: ConsumableWhereUniqueInput
}

input ConsumableUpdateWithWhereUniqueNestedInput {
  where: ConsumableWhereUniqueInput!
  data: ConsumableUpdateDataInput!
}

input ConsumableUpsertNestedInput {
  update: ConsumableUpdateDataInput!
  create: ConsumableCreateInput!
}

input ConsumableUpsertWithWhereUniqueNestedInput {
  where: ConsumableWhereUniqueInput!
  update: ConsumableUpdateDataInput!
  create: ConsumableCreateInput!
}

input ConsumableWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serial: String
  serial_not: String
  serial_in: [String!]
  serial_not_in: [String!]
  serial_lt: String
  serial_lte: String
  serial_gt: String
  serial_gte: String
  serial_contains: String
  serial_not_contains: String
  serial_starts_with: String
  serial_not_starts_with: String
  serial_ends_with: String
  serial_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  available: Boolean
  available_not: Boolean
  stock: Int
  stock_not: Int
  stock_in: [Int!]
  stock_not_in: [Int!]
  stock_lt: Int
  stock_lte: Int
  stock_gt: Int
  stock_gte: Int
  minimalStock: Int
  minimalStock_not: Int
  minimalStock_in: [Int!]
  minimalStock_not_in: [Int!]
  minimalStock_lt: Int
  minimalStock_lte: Int
  minimalStock_gt: Int
  minimalStock_gte: Int
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  consumableType: String
  consumableType_not: String
  consumableType_in: [String!]
  consumableType_not_in: [String!]
  consumableType_lt: String
  consumableType_lte: String
  consumableType_gt: String
  consumableType_gte: String
  consumableType_contains: String
  consumableType_not_contains: String
  consumableType_starts_with: String
  consumableType_not_starts_with: String
  consumableType_ends_with: String
  consumableType_not_ends_with: String
  AND: [ConsumableWhereInput!]
  OR: [ConsumableWhereInput!]
  NOT: [ConsumableWhereInput!]
}

input ConsumableWhereUniqueInput {
  id: Int
}

scalar DateTime

type Equipment {
  id: Int!
  serial: String!
  name: String!
  description: String!
  available: Boolean!
  stock: Int!
  usable: Boolean!
}

type EquipmentConnection {
  pageInfo: PageInfo!
  edges: [EquipmentEdge]!
  aggregate: AggregateEquipment!
}

input EquipmentCreateInput {
  id: Int
  serial: String!
  name: String!
  description: String!
  available: Boolean
  stock: Int!
  usable: Boolean
}

input EquipmentCreateManyInput {
  create: [EquipmentCreateInput!]
  connect: [EquipmentWhereUniqueInput!]
}

input EquipmentCreateOneInput {
  create: EquipmentCreateInput
  connect: EquipmentWhereUniqueInput
}

type EquipmentEdge {
  node: Equipment!
  cursor: String!
}

enum EquipmentOrderByInput {
  id_ASC
  id_DESC
  serial_ASC
  serial_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  available_ASC
  available_DESC
  stock_ASC
  stock_DESC
  usable_ASC
  usable_DESC
}

type EquipmentPreviousValues {
  id: Int!
  serial: String!
  name: String!
  description: String!
  available: Boolean!
  stock: Int!
  usable: Boolean!
}

input EquipmentScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serial: String
  serial_not: String
  serial_in: [String!]
  serial_not_in: [String!]
  serial_lt: String
  serial_lte: String
  serial_gt: String
  serial_gte: String
  serial_contains: String
  serial_not_contains: String
  serial_starts_with: String
  serial_not_starts_with: String
  serial_ends_with: String
  serial_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  available: Boolean
  available_not: Boolean
  stock: Int
  stock_not: Int
  stock_in: [Int!]
  stock_not_in: [Int!]
  stock_lt: Int
  stock_lte: Int
  stock_gt: Int
  stock_gte: Int
  usable: Boolean
  usable_not: Boolean
  AND: [EquipmentScalarWhereInput!]
  OR: [EquipmentScalarWhereInput!]
  NOT: [EquipmentScalarWhereInput!]
}

type EquipmentSubscriptionPayload {
  mutation: MutationType!
  node: Equipment
  updatedFields: [String!]
  previousValues: EquipmentPreviousValues
}

input EquipmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EquipmentWhereInput
  AND: [EquipmentSubscriptionWhereInput!]
  OR: [EquipmentSubscriptionWhereInput!]
  NOT: [EquipmentSubscriptionWhereInput!]
}

input EquipmentUpdateDataInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  usable: Boolean
}

input EquipmentUpdateInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  usable: Boolean
}

input EquipmentUpdateManyDataInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  usable: Boolean
}

input EquipmentUpdateManyInput {
  create: [EquipmentCreateInput!]
  update: [EquipmentUpdateWithWhereUniqueNestedInput!]
  upsert: [EquipmentUpsertWithWhereUniqueNestedInput!]
  delete: [EquipmentWhereUniqueInput!]
  connect: [EquipmentWhereUniqueInput!]
  set: [EquipmentWhereUniqueInput!]
  disconnect: [EquipmentWhereUniqueInput!]
  deleteMany: [EquipmentScalarWhereInput!]
  updateMany: [EquipmentUpdateManyWithWhereNestedInput!]
}

input EquipmentUpdateManyMutationInput {
  serial: String
  name: String
  description: String
  available: Boolean
  stock: Int
  usable: Boolean
}

input EquipmentUpdateManyWithWhereNestedInput {
  where: EquipmentScalarWhereInput!
  data: EquipmentUpdateManyDataInput!
}

input EquipmentUpdateOneRequiredInput {
  create: EquipmentCreateInput
  update: EquipmentUpdateDataInput
  upsert: EquipmentUpsertNestedInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentUpdateWithWhereUniqueNestedInput {
  where: EquipmentWhereUniqueInput!
  data: EquipmentUpdateDataInput!
}

input EquipmentUpsertNestedInput {
  update: EquipmentUpdateDataInput!
  create: EquipmentCreateInput!
}

input EquipmentUpsertWithWhereUniqueNestedInput {
  where: EquipmentWhereUniqueInput!
  update: EquipmentUpdateDataInput!
  create: EquipmentCreateInput!
}

input EquipmentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serial: String
  serial_not: String
  serial_in: [String!]
  serial_not_in: [String!]
  serial_lt: String
  serial_lte: String
  serial_gt: String
  serial_gte: String
  serial_contains: String
  serial_not_contains: String
  serial_starts_with: String
  serial_not_starts_with: String
  serial_ends_with: String
  serial_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  available: Boolean
  available_not: Boolean
  stock: Int
  stock_not: Int
  stock_in: [Int!]
  stock_not_in: [Int!]
  stock_lt: Int
  stock_lte: Int
  stock_gt: Int
  stock_gte: Int
  usable: Boolean
  usable_not: Boolean
  AND: [EquipmentWhereInput!]
  OR: [EquipmentWhereInput!]
  NOT: [EquipmentWhereInput!]
}

input EquipmentWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createConsumable(data: ConsumableCreateInput!): Consumable!
  updateConsumable(data: ConsumableUpdateInput!, where: ConsumableWhereUniqueInput!): Consumable
  updateManyConsumables(data: ConsumableUpdateManyMutationInput!, where: ConsumableWhereInput): BatchPayload!
  upsertConsumable(where: ConsumableWhereUniqueInput!, create: ConsumableCreateInput!, update: ConsumableUpdateInput!): Consumable!
  deleteConsumable(where: ConsumableWhereUniqueInput!): Consumable
  deleteManyConsumables(where: ConsumableWhereInput): BatchPayload!
  createEquipment(data: EquipmentCreateInput!): Equipment!
  updateEquipment(data: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment
  updateManyEquipments(data: EquipmentUpdateManyMutationInput!, where: EquipmentWhereInput): BatchPayload!
  upsertEquipment(where: EquipmentWhereUniqueInput!, create: EquipmentCreateInput!, update: EquipmentUpdateInput!): Equipment!
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteManyEquipments(where: EquipmentWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderConsumable(data: OrderConsumableCreateInput!): OrderConsumable!
  updateOrderConsumable(data: OrderConsumableUpdateInput!, where: OrderConsumableWhereUniqueInput!): OrderConsumable
  updateManyOrderConsumables(data: OrderConsumableUpdateManyMutationInput!, where: OrderConsumableWhereInput): BatchPayload!
  upsertOrderConsumable(where: OrderConsumableWhereUniqueInput!, create: OrderConsumableCreateInput!, update: OrderConsumableUpdateInput!): OrderConsumable!
  deleteOrderConsumable(where: OrderConsumableWhereUniqueInput!): OrderConsumable
  deleteManyOrderConsumables(where: OrderConsumableWhereInput): BatchPayload!
  createOrderEquipment(data: OrderEquipmentCreateInput!): OrderEquipment!
  updateOrderEquipment(data: OrderEquipmentUpdateInput!, where: OrderEquipmentWhereUniqueInput!): OrderEquipment
  updateManyOrderEquipments(data: OrderEquipmentUpdateManyMutationInput!, where: OrderEquipmentWhereInput): BatchPayload!
  upsertOrderEquipment(where: OrderEquipmentWhereUniqueInput!, create: OrderEquipmentCreateInput!, update: OrderEquipmentUpdateInput!): OrderEquipment!
  deleteOrderEquipment(where: OrderEquipmentWhereUniqueInput!): OrderEquipment
  deleteManyOrderEquipments(where: OrderEquipmentWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: Int!
  status: OrderStatus!
  observations: String
  createdAt: DateTime!
  updatedAt: DateTime!
  closedAt: DateTime
  project: Project!
  administrator: User!
  user: User!
  takenEquipments(where: OrderEquipmentWhereInput, orderBy: OrderEquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderEquipment!]
  takenConsumables(where: OrderConsumableWhereInput, orderBy: OrderConsumableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderConsumable!]
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

type OrderConsumable {
  id: Int!
  consumable: Consumable!
  amount: Int!
}

type OrderConsumableConnection {
  pageInfo: PageInfo!
  edges: [OrderConsumableEdge]!
  aggregate: AggregateOrderConsumable!
}

input OrderConsumableCreateInput {
  id: Int
  consumable: ConsumableCreateOneInput!
  amount: Int!
}

input OrderConsumableCreateManyInput {
  create: [OrderConsumableCreateInput!]
  connect: [OrderConsumableWhereUniqueInput!]
}

type OrderConsumableEdge {
  node: OrderConsumable!
  cursor: String!
}

enum OrderConsumableOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type OrderConsumablePreviousValues {
  id: Int!
  amount: Int!
}

input OrderConsumableScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  AND: [OrderConsumableScalarWhereInput!]
  OR: [OrderConsumableScalarWhereInput!]
  NOT: [OrderConsumableScalarWhereInput!]
}

type OrderConsumableSubscriptionPayload {
  mutation: MutationType!
  node: OrderConsumable
  updatedFields: [String!]
  previousValues: OrderConsumablePreviousValues
}

input OrderConsumableSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderConsumableWhereInput
  AND: [OrderConsumableSubscriptionWhereInput!]
  OR: [OrderConsumableSubscriptionWhereInput!]
  NOT: [OrderConsumableSubscriptionWhereInput!]
}

input OrderConsumableUpdateDataInput {
  consumable: ConsumableUpdateOneRequiredInput
  amount: Int
}

input OrderConsumableUpdateInput {
  consumable: ConsumableUpdateOneRequiredInput
  amount: Int
}

input OrderConsumableUpdateManyDataInput {
  amount: Int
}

input OrderConsumableUpdateManyInput {
  create: [OrderConsumableCreateInput!]
  update: [OrderConsumableUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderConsumableUpsertWithWhereUniqueNestedInput!]
  delete: [OrderConsumableWhereUniqueInput!]
  connect: [OrderConsumableWhereUniqueInput!]
  set: [OrderConsumableWhereUniqueInput!]
  disconnect: [OrderConsumableWhereUniqueInput!]
  deleteMany: [OrderConsumableScalarWhereInput!]
  updateMany: [OrderConsumableUpdateManyWithWhereNestedInput!]
}

input OrderConsumableUpdateManyMutationInput {
  amount: Int
}

input OrderConsumableUpdateManyWithWhereNestedInput {
  where: OrderConsumableScalarWhereInput!
  data: OrderConsumableUpdateManyDataInput!
}

input OrderConsumableUpdateWithWhereUniqueNestedInput {
  where: OrderConsumableWhereUniqueInput!
  data: OrderConsumableUpdateDataInput!
}

input OrderConsumableUpsertWithWhereUniqueNestedInput {
  where: OrderConsumableWhereUniqueInput!
  update: OrderConsumableUpdateDataInput!
  create: OrderConsumableCreateInput!
}

input OrderConsumableWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  consumable: ConsumableWhereInput
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  AND: [OrderConsumableWhereInput!]
  OR: [OrderConsumableWhereInput!]
  NOT: [OrderConsumableWhereInput!]
}

input OrderConsumableWhereUniqueInput {
  id: Int
}

input OrderCreateInput {
  id: Int
  status: OrderStatus!
  observations: String
  closedAt: DateTime
  project: ProjectCreateOneInput!
  administrator: UserCreateOneInput!
  user: UserCreateOneInput!
  takenEquipments: OrderEquipmentCreateManyInput
  takenConsumables: OrderConsumableCreateManyInput
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderEquipment {
  id: Int!
  equipment: Equipment!
  amount: Int!
  takenAt: DateTime!
  returnedAt: DateTime
}

type OrderEquipmentConnection {
  pageInfo: PageInfo!
  edges: [OrderEquipmentEdge]!
  aggregate: AggregateOrderEquipment!
}

input OrderEquipmentCreateInput {
  id: Int
  equipment: EquipmentCreateOneInput!
  amount: Int!
  takenAt: DateTime!
  returnedAt: DateTime
}

input OrderEquipmentCreateManyInput {
  create: [OrderEquipmentCreateInput!]
  connect: [OrderEquipmentWhereUniqueInput!]
}

type OrderEquipmentEdge {
  node: OrderEquipment!
  cursor: String!
}

enum OrderEquipmentOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  takenAt_ASC
  takenAt_DESC
  returnedAt_ASC
  returnedAt_DESC
}

type OrderEquipmentPreviousValues {
  id: Int!
  amount: Int!
  takenAt: DateTime!
  returnedAt: DateTime
}

input OrderEquipmentScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  takenAt: DateTime
  takenAt_not: DateTime
  takenAt_in: [DateTime!]
  takenAt_not_in: [DateTime!]
  takenAt_lt: DateTime
  takenAt_lte: DateTime
  takenAt_gt: DateTime
  takenAt_gte: DateTime
  returnedAt: DateTime
  returnedAt_not: DateTime
  returnedAt_in: [DateTime!]
  returnedAt_not_in: [DateTime!]
  returnedAt_lt: DateTime
  returnedAt_lte: DateTime
  returnedAt_gt: DateTime
  returnedAt_gte: DateTime
  AND: [OrderEquipmentScalarWhereInput!]
  OR: [OrderEquipmentScalarWhereInput!]
  NOT: [OrderEquipmentScalarWhereInput!]
}

type OrderEquipmentSubscriptionPayload {
  mutation: MutationType!
  node: OrderEquipment
  updatedFields: [String!]
  previousValues: OrderEquipmentPreviousValues
}

input OrderEquipmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderEquipmentWhereInput
  AND: [OrderEquipmentSubscriptionWhereInput!]
  OR: [OrderEquipmentSubscriptionWhereInput!]
  NOT: [OrderEquipmentSubscriptionWhereInput!]
}

input OrderEquipmentUpdateDataInput {
  equipment: EquipmentUpdateOneRequiredInput
  amount: Int
  takenAt: DateTime
  returnedAt: DateTime
}

input OrderEquipmentUpdateInput {
  equipment: EquipmentUpdateOneRequiredInput
  amount: Int
  takenAt: DateTime
  returnedAt: DateTime
}

input OrderEquipmentUpdateManyDataInput {
  amount: Int
  takenAt: DateTime
  returnedAt: DateTime
}

input OrderEquipmentUpdateManyInput {
  create: [OrderEquipmentCreateInput!]
  update: [OrderEquipmentUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderEquipmentUpsertWithWhereUniqueNestedInput!]
  delete: [OrderEquipmentWhereUniqueInput!]
  connect: [OrderEquipmentWhereUniqueInput!]
  set: [OrderEquipmentWhereUniqueInput!]
  disconnect: [OrderEquipmentWhereUniqueInput!]
  deleteMany: [OrderEquipmentScalarWhereInput!]
  updateMany: [OrderEquipmentUpdateManyWithWhereNestedInput!]
}

input OrderEquipmentUpdateManyMutationInput {
  amount: Int
  takenAt: DateTime
  returnedAt: DateTime
}

input OrderEquipmentUpdateManyWithWhereNestedInput {
  where: OrderEquipmentScalarWhereInput!
  data: OrderEquipmentUpdateManyDataInput!
}

input OrderEquipmentUpdateWithWhereUniqueNestedInput {
  where: OrderEquipmentWhereUniqueInput!
  data: OrderEquipmentUpdateDataInput!
}

input OrderEquipmentUpsertWithWhereUniqueNestedInput {
  where: OrderEquipmentWhereUniqueInput!
  update: OrderEquipmentUpdateDataInput!
  create: OrderEquipmentCreateInput!
}

input OrderEquipmentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  equipment: EquipmentWhereInput
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  takenAt: DateTime
  takenAt_not: DateTime
  takenAt_in: [DateTime!]
  takenAt_not_in: [DateTime!]
  takenAt_lt: DateTime
  takenAt_lte: DateTime
  takenAt_gt: DateTime
  takenAt_gte: DateTime
  returnedAt: DateTime
  returnedAt_not: DateTime
  returnedAt_in: [DateTime!]
  returnedAt_not_in: [DateTime!]
  returnedAt_lt: DateTime
  returnedAt_lte: DateTime
  returnedAt_gt: DateTime
  returnedAt_gte: DateTime
  AND: [OrderEquipmentWhereInput!]
  OR: [OrderEquipmentWhereInput!]
  NOT: [OrderEquipmentWhereInput!]
}

input OrderEquipmentWhereUniqueInput {
  id: Int
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  observations_ASC
  observations_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  closedAt_ASC
  closedAt_DESC
}

type OrderPreviousValues {
  id: Int!
  status: OrderStatus!
  observations: String
  createdAt: DateTime!
  updatedAt: DateTime!
  closedAt: DateTime
}

enum OrderStatus {
  CREATED
  CLOSED
  ON_HOLD
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  status: OrderStatus
  observations: String
  closedAt: DateTime
  project: ProjectUpdateOneRequiredInput
  administrator: UserUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  takenEquipments: OrderEquipmentUpdateManyInput
  takenConsumables: OrderConsumableUpdateManyInput
}

input OrderUpdateManyMutationInput {
  status: OrderStatus
  observations: String
  closedAt: DateTime
}

input OrderWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  status: OrderStatus
  status_not: OrderStatus
  status_in: [OrderStatus!]
  status_not_in: [OrderStatus!]
  observations: String
  observations_not: String
  observations_in: [String!]
  observations_not_in: [String!]
  observations_lt: String
  observations_lte: String
  observations_gt: String
  observations_gte: String
  observations_contains: String
  observations_not_contains: String
  observations_starts_with: String
  observations_not_starts_with: String
  observations_ends_with: String
  observations_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  closedAt: DateTime
  closedAt_not: DateTime
  closedAt_in: [DateTime!]
  closedAt_not_in: [DateTime!]
  closedAt_lt: DateTime
  closedAt_lte: DateTime
  closedAt_gt: DateTime
  closedAt_gte: DateTime
  project: ProjectWhereInput
  administrator: UserWhereInput
  user: UserWhereInput
  takenEquipments_every: OrderEquipmentWhereInput
  takenEquipments_some: OrderEquipmentWhereInput
  takenEquipments_none: OrderEquipmentWhereInput
  takenConsumables_every: OrderConsumableWhereInput
  takenConsumables_some: OrderConsumableWhereInput
  takenConsumables_none: OrderConsumableWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: Int
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: Int!
  projectName: String!
  manager: User!
  chef: User!
  status: ProjectStatus!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment!]
  consumables(where: ConsumableWhereInput, orderBy: ConsumableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Consumable!]
  description: String
  startDate: DateTime
  approvalDate: DateTime
  expirationDate: DateTime
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: Int
  projectName: String!
  manager: UserCreateOneInput!
  chef: UserCreateOneInput!
  status: ProjectStatus
  members: UserCreateManyInput
  equipments: EquipmentCreateManyInput
  consumables: ConsumableCreateManyInput
  description: String
  startDate: DateTime
  approvalDate: DateTime
  expirationDate: DateTime
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  projectName_ASC
  projectName_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  startDate_ASC
  startDate_DESC
  approvalDate_ASC
  approvalDate_DESC
  expirationDate_ASC
  expirationDate_DESC
}

type ProjectPreviousValues {
  id: Int!
  projectName: String!
  status: ProjectStatus!
  description: String
  startDate: DateTime
  approvalDate: DateTime
  expirationDate: DateTime
}

enum ProjectStatus {
  ON_HOLD
  APPROVED
  NOT_APPROVED
  CANCELED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateDataInput {
  projectName: String
  manager: UserUpdateOneRequiredInput
  chef: UserUpdateOneRequiredInput
  status: ProjectStatus
  members: UserUpdateManyInput
  equipments: EquipmentUpdateManyInput
  consumables: ConsumableUpdateManyInput
  description: String
  startDate: DateTime
  approvalDate: DateTime
  expirationDate: DateTime
}

input ProjectUpdateInput {
  projectName: String
  manager: UserUpdateOneRequiredInput
  chef: UserUpdateOneRequiredInput
  status: ProjectStatus
  members: UserUpdateManyInput
  equipments: EquipmentUpdateManyInput
  consumables: ConsumableUpdateManyInput
  description: String
  startDate: DateTime
  approvalDate: DateTime
  expirationDate: DateTime
}

input ProjectUpdateManyMutationInput {
  projectName: String
  status: ProjectStatus
  description: String
  startDate: DateTime
  approvalDate: DateTime
  expirationDate: DateTime
}

input ProjectUpdateOneRequiredInput {
  create: ProjectCreateInput
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  projectName: String
  projectName_not: String
  projectName_in: [String!]
  projectName_not_in: [String!]
  projectName_lt: String
  projectName_lte: String
  projectName_gt: String
  projectName_gte: String
  projectName_contains: String
  projectName_not_contains: String
  projectName_starts_with: String
  projectName_not_starts_with: String
  projectName_ends_with: String
  projectName_not_ends_with: String
  manager: UserWhereInput
  chef: UserWhereInput
  status: ProjectStatus
  status_not: ProjectStatus
  status_in: [ProjectStatus!]
  status_not_in: [ProjectStatus!]
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  equipments_every: EquipmentWhereInput
  equipments_some: EquipmentWhereInput
  equipments_none: EquipmentWhereInput
  consumables_every: ConsumableWhereInput
  consumables_some: ConsumableWhereInput
  consumables_none: ConsumableWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  approvalDate: DateTime
  approvalDate_not: DateTime
  approvalDate_in: [DateTime!]
  approvalDate_not_in: [DateTime!]
  approvalDate_lt: DateTime
  approvalDate_lte: DateTime
  approvalDate_gt: DateTime
  approvalDate_gte: DateTime
  expirationDate: DateTime
  expirationDate_not: DateTime
  expirationDate_in: [DateTime!]
  expirationDate_not_in: [DateTime!]
  expirationDate_lt: DateTime
  expirationDate_lte: DateTime
  expirationDate_gt: DateTime
  expirationDate_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  consumable(where: ConsumableWhereUniqueInput!): Consumable
  consumables(where: ConsumableWhereInput, orderBy: ConsumableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Consumable]!
  consumablesConnection(where: ConsumableWhereInput, orderBy: ConsumableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConsumableConnection!
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment]!
  equipmentsConnection(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderConsumable(where: OrderConsumableWhereUniqueInput!): OrderConsumable
  orderConsumables(where: OrderConsumableWhereInput, orderBy: OrderConsumableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderConsumable]!
  orderConsumablesConnection(where: OrderConsumableWhereInput, orderBy: OrderConsumableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConsumableConnection!
  orderEquipment(where: OrderEquipmentWhereUniqueInput!): OrderEquipment
  orderEquipments(where: OrderEquipmentWhereInput, orderBy: OrderEquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderEquipment]!
  orderEquipmentsConnection(where: OrderEquipmentWhereInput, orderBy: OrderEquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderEquipmentConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  consumable(where: ConsumableSubscriptionWhereInput): ConsumableSubscriptionPayload
  equipment(where: EquipmentSubscriptionWhereInput): EquipmentSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderConsumable(where: OrderConsumableSubscriptionWhereInput): OrderConsumableSubscriptionPayload
  orderEquipment(where: OrderEquipmentSubscriptionWhereInput): OrderEquipmentSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: Int!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: Int
  name: String!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: Int!
  name: String!
}

input UserScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyDataInput {
  name: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
`